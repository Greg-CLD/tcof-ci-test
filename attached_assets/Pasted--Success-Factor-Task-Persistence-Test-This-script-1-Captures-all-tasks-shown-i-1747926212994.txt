/**
 * Success Factor Task Persistence Test
 * 
 * This script:
 * 1. Captures all tasks shown in the UI
 * 2. Attempts to toggle a Success Factor task
 * 3. Monitors the network requests/responses
 * 4. Verifies the task state change is persisted
 * 
 * Instructions:
 * 1. Copy and paste the entire script into your browser console
 * 2. Press Enter to run the test
 * 3. Watch the console for detailed logs and results
 */

(async function runTest() {
  console.log('===== Success Factor Task Persistence Test =====');
  console.log('Testing if task state changes persist properly...\n');

  // Configuration - use an existing project and task if needed
  const projectId = window.location.pathname.includes('/projects/') 
    ? window.location.pathname.split('/projects/')[1].split('/')[0]
    : 'bc55c1a2-0cdf-4108-aa9e-44b44baea3b8'; // Default test project

  console.log(`Using project ID: ${projectId}`);
  
  try {
    // Step 1: Get current tasks
    console.log('\nSTEP 1: Fetching current tasks...');
    const initialTasks = await apiRequest('GET', `/api/projects/${projectId}/tasks`);
    console.log(`Found ${initialTasks.length} tasks in this project`);
    
    // Find Success Factor tasks
    const successFactorTasks = initialTasks.filter(task => 
      task.origin === 'factor' && task.sourceId
    );
    
    console.log(`Found ${successFactorTasks.length} Success Factor tasks`);
    
    if (successFactorTasks.length === 0) {
      throw new Error('No Success Factor tasks found to test with');
    }
    
    // Step 2: Pick a Success Factor task and log its details
    const taskToToggle = successFactorTasks[0];
    console.log('\nSTEP 2: Selected Success Factor task to toggle:');
    console.log(`ID: ${taskToToggle.id}`);
    console.log(`SourceID: ${taskToToggle.sourceId}`);
    console.log(`Text: ${taskToToggle.text}`);
    console.log(`Current state: ${taskToToggle.completed ? 'COMPLETED' : 'NOT COMPLETED'}`);
    
    // Step 3: Toggle the task
    const newState = !taskToToggle.completed;
    console.log(`\nSTEP 3: Toggling task completion to: ${newState ? 'COMPLETED' : 'NOT COMPLETED'}`);
    
    const updateResult = await apiRequest(
      'PUT',
      `/api/projects/${projectId}/tasks/${taskToToggle.id}`,
      { completed: newState }
    );
    
    console.log('Update result:', updateResult);
    
    if (!updateResult || !updateResult.success) {
      throw new Error('Task update failed: ' + (updateResult?.message || 'Unknown error'));
    }
    
    // Step 4: Verify the update was applied
    console.log('\nSTEP 4: Verifying update was applied...');
    const updatedTasks = await apiRequest('GET', `/api/projects/${projectId}/tasks`);
    
    const updatedTask = updatedTasks.find(t => t.id === taskToToggle.id);
    if (!updatedTask) {
      throw new Error('Task not found after update!');
    }
    
    console.log(`Task current state: ${updatedTask.completed ? 'COMPLETED' : 'NOT COMPLETED'}`);
    console.log(`Expected state: ${newState ? 'COMPLETED' : 'NOT COMPLETED'}`);
    
    if (updatedTask.completed !== newState) {
      throw new Error('Task state did not update correctly');
    }
    
    console.log('✓ Task state updated successfully!');
    
    // Step 5: Verify key properties were preserved
    console.log('\nSTEP 5: Verifying task metadata was preserved...');
    
    if (updatedTask.origin !== 'factor') {
      throw new Error(`Origin changed from 'factor' to '${updatedTask.origin}'`);
    }
    
    if (updatedTask.sourceId !== taskToToggle.sourceId) {
      throw new Error(`SourceId changed from '${taskToToggle.sourceId}' to '${updatedTask.sourceId}'`);
    }
    
    console.log('✓ Task metadata preserved correctly!');
    
    // Step 6: Prepare for page reload test
    console.log('\nSTEP 6: Instructions for page reload test:');
    console.log('1. Reload the page');
    console.log('2. After reload, run this verification script:');
    console.log(`
    (async function verifyAfterReload() {
      console.log('===== Post-Reload Verification =====');
      try {
        const tasks = await fetch('/api/projects/${projectId}/tasks')
          .then(r => r.json())
          .catch(e => console.error('Fetch error:', e));
          
        const task = tasks.find(t => t.id === '${taskToToggle.id}');
        
        if (!task) {
          throw new Error('Task not found after page reload');
        }
        
        console.log('Task state after reload:', task.completed ? 'COMPLETED' : 'NOT COMPLETED');
        console.log('Expected state:', ${newState ? 'true' : 'false'} ? 'COMPLETED' : 'NOT COMPLETED');
        
        if (task.completed !== ${newState}) {
          throw new Error('Task state did not persist across reload');
        }
        
        if (task.origin !== 'factor') {
          throw new Error('Task origin changed during reload');
        }
        
        if (task.sourceId !== '${taskToToggle.sourceId}') {
          throw new Error('Task sourceId changed during reload');
        }
        
        console.log('✓ Success! Task state persisted correctly across page reload');
      } catch (error) {
        console.error('Verification failed:', error);
      }
    })();
    `);
    
    console.log('\n===== Test Completed Successfully =====');
    console.log('Task successfully toggled to:', newState ? 'COMPLETED' : 'NOT COMPLETED');
    console.log('Please reload the page and run the verification script to confirm persistence');
    
  } catch (error) {
    console.error('\n❌ TEST FAILED:', error);
    console.log('Error details:', error.stack);
  }
})();

// Helper function for API requests
async function apiRequest(method, endpoint, body = null) {
  const timestamp = Date.now();
  console.log(`API ${method} Request to ${endpoint}${body ? ' with data:' : ''}`);
  if (body) console.log(body);
  
  try {
    const response = await fetch(endpoint, {
      method,
      headers: {
        'Content-Type': 'application/json',
        'Accept': 'application/json'
      },
      credentials: 'include',
      body: body ? JSON.stringify(body) : undefined
    });
    
    console.log(`API Response status: ${response.status}`);
    
    if (!response.ok) {
      const errorText = await response.text();
      console.error(`API Error (${response.status}):`, errorText);
      throw new Error(`API request failed: ${response.status} ${errorText}`);
    }
    
    const data = await response.json();
    console.log(`API Response in ${Date.now() - timestamp}ms:`, data);
    return data;
  } catch (error) {
    console.error('API Request error:', error);
    throw error;
  }
}
Promise {<pending>}
VM77061:144 
 
❌ TEST FAILED: Error: No Success Factor tasks found to test with
    at runTest (<anonymous>:41:13)
runTest	@	VM77061:144
await in runTest		
(anonymous)	@	VM77061:147
